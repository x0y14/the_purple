# 請求者反乱
# Triggers as a result of a Claimant Faction demand being refused
claimant_faction_war = {
	icon = claim_cb
	group = civil_war
	ai_only_against_liege = no
	target_titles = claim
	allow_hostages = no
	allowed_for_character = {
		scope:attacker = {
			is_leading_faction_type = claimant_faction
		}
	}

	allowed_against_character = {
		exists = scope:attacker.joined_faction
		scope:attacker.joined_faction = {
			special_title.holder = scope:defender
		}
	}

	target_de_jure_regions_above = yes

	valid_to_start = {}

	should_invalidate = {
		OR = {
			NOT = { exists = scope:attacker.joined_faction }
			NOT = {
				scope:attacker.joined_faction = {
					exists = special_character
					special_character = { is_alive = yes }
					has_special_title = yes
				}
			}
			scope:attacker.joined_faction.special_character = scope:attacker.joined_faction.special_title.holder
		}
	}

	on_invalidated_desc = msg_invalidate_war_title

	on_declaration = {
		#on_declared_war = yes
	}

	# TODO About Force Blind
	on_victory_desc = {
		desc = claimant_faction_war_victory_desc

	}

	# 反乱者側の勝利
	on_victory = {
		scope:attacker = { show_pow_release_message_effect = yes }

		#EP2 Accolade glory gain from winning against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_med_effect = yes }

		hidden_effect = {
			scope:attacker = {
				add_truce_both_ways = {
					character = scope:defender
					days = 1825
					war = root.war
					result = victory
				}
			}
		}
		
		# -- the purple --
		# 皇帝位請求反乱を扇動したものが、自ら皇帝になろうとしている場合
		# TODO なんか一度終戦のタイミングで放出されてしまうから修正したい
		if = {
			limit = {
				AND = {
					# 攻撃側がプレイヤーなら後処理はプレイヤーに任せる
					scope:attacker = { is_ai = yes }
					# attacker: 反乱を起こした側
					# defender: 反乱を起こされた側
					# 反乱を起こされたのがビザンツ皇帝である
					scope:defender = { has_title = title:e_byzantium }
					# 反乱を起こした側がビザンツ帝国の請求権を持っている
					scope:attacker = { has_claim_on = title:e_byzantium }
					# 反乱の目的が皇帝位である
					title:e_byzantium = { is_in_list = target_titles }
					# 皇帝に据える対象が反乱扇動者である
					scope:attacker.joined_faction.special_character = scope:attacker
				}
			}
			# # 戦勝終了時に旧皇帝を捕獲
			scope:attacker = {
				if = {
					limit = {
						scope:defender = { is_imprisoned = no }
					}
					imprison = {
						target = scope:defender
						type = house_arrest
					}
				}
			}

			# 攻撃者（新皇帝）をactor
			# 防衛者（旧皇帝）をreceipientとして保存
			scope:attacker = { save_scope_as = actor }
			scope:defender = { save_scope_as = recipient }
			# 目潰しインタラクションと同じことをそのまま行う
			#（インタラクションの強制起動がわからないので内容をコピペ）

			scope:recipient = {
				add_character_flag = {
					flag = is_being_tortured
					months = 6 # Players in MP can keep the event window open...
				}
			}
	
			blind_and_castrate_actor_effect = yes #Stress & dread
	
			show_as_tooltip = {
				scope:recipient = {
					add_trait = blind
					release_from_prison = yes
				}
			}
	
			# Merciful Blindings
			scope:actor = {
				if = {
					limit = {
						culture = { has_cultural_parameter = merciful_blinding }
						OR = {
							has_execute_reason = scope:recipient
							has_banish_reason = scope:recipient
						}
					}
					add_piety = medium_piety_gain
				}
			}
			
			torture_blind_castrate_opinion_effect = { VERB = blinded }
	
			scope:actor = {
				trigger_event = {
					id = prison.1020
					days = 1
				}
			}
		}
		# -- ---------- --

		on_claimant_faction_war_win_common = {
			TARGET_TITLES = target_titles
			ATTACKER = scope:attacker
			DEFENDER = scope:defender
			CLAIMANT = scope:attacker.joined_faction.special_character
			#ATTACKER_PRESTIGE = 10
			#DEFENDER_PRESTIGE = -10
		}


	}

	on_white_peace_desc = {
		desc = claimant_faction_war_white_peace_desc

	}

	on_white_peace = {
		scope:attacker = {
			show_pow_release_message_effect = yes
			stress_impact = {
 				ambitious = medium_stress_impact_gain
 				arrogant = medium_stress_impact_gain
 			}
		}

		scope:defender = {
			stress_impact = {
 				arrogant = medium_stress_impact_gain
 			}
		}
		on_white_peace_faction_revolt_war = yes

		hidden_effect = {
			scope:attacker = {
				add_truce_both_ways = {
					character = scope:defender
					days = 1825
					war = root.war
					result = white_peace
				}
				if = {
					limit = { exists = joined_faction }
					joined_faction = {
						destroy_faction = yes # Destroy the faction if it wasn't already destroyed automatically.
					}
				}
			}
		}
	}

	# TODO About Force Blind
	on_defeat_desc = {
		desc = claimant_faction_war_defeat_desc

	}

	# 皇帝側の勝利
	on_defeat = {

		# -- the purple --
		# 皇帝側がAIであること
		if  = {
			limit = {
				AND = {
					# 皇帝がプレイヤーなら後処理はプレイヤーに任せる
					scope:defender = { is_ai = yes }
					# attacker: 反乱を起こした側
					# defender: 反乱を起こされた側
					# 反乱を起こされたのがビザンツ皇帝である
					scope:defender = { has_title = title:e_byzantium }
					# 反乱を起こした側がビザンツ帝国の請求権を持っている
					scope:attacker = { has_claim_on = title:e_byzantium }
					# 反乱の目的が皇帝位である
					title:e_byzantium = { is_in_list = target_titles }
					# 皇帝に据える対象が反乱扇動者である
					scope:attacker.joined_faction.special_character = scope:attacker
				}
			}
			# 攻撃者（反乱者）をreceipient
			# 防衛者（皇帝）をactorとして保存
			scope:attacker = { save_scope_as = recipient }
			scope:defender = { save_scope_as = actor }
			scope:recipient = {
				add_character_flag = {
					flag = is_being_tortured
					months = 6 # Players in MP can keep the event window open...
				}
			}
	
			blind_and_castrate_actor_effect = yes #Stress & dread
	
			show_as_tooltip = {
				scope:recipient = {
					add_trait = blind
					release_from_prison = yes
				}
			}
	
			# Merciful Blindings
			scope:actor = {
				if = {
					limit = {
						culture = { has_cultural_parameter = merciful_blinding }
						OR = {
							has_execute_reason = scope:recipient
							has_banish_reason = scope:recipient
						}
					}
					add_piety = medium_piety_gain
				}
			}
			
			torture_blind_castrate_opinion_effect = { VERB = blinded }
	
			scope:actor = {
				trigger_event = {
					id = prison.1020
					days = 1
				}
			}
		}
		# -- ----------- --

		scope:attacker = { show_pow_release_message_effect = yes }
		on_lost_faction_revolt_war = yes

		scope:defender = {
			add_dread = medium_dread_gain
			add_achievement_flag_effect = { FLAG = achievement_know_your_place_flag }
		}

	}

	check_attacker_inheritance_validity = no

	on_primary_attacker_death = inherit_faction
	on_primary_defender_death = inherit

	transfer_behavior = transfer

	attacker_allies_inherit = no
	defender_allies_inherit = yes

	war_name = "CLAIMANT_WAR_NAME"

	interface_priority = 80

	use_de_jure_wargoal_only = yes

	attacker_wargoal_percentage = 0.8

	max_attacker_score_from_battles = 50
	max_defender_score_from_battles = 100
	
	max_defender_score_from_occupation = 150
	max_attacker_score_from_occupation = 150

	max_ai_diplo_distance_to_title = 500
}

# # 権限低下要求反乱
# liberty_faction_war = {
# 	icon = dissolution_war
# 	group = civil_war
# 	ai_only_against_liege = yes
# 	allow_hostages = no
# 	allowed_for_character = {
# 		scope:attacker = {
# 			is_leading_faction_type = liberty_faction
# 		}
# 	}

# 	allowed_against_character = {
# 		scope:attacker = {
# 			liege = scope:defender
# 		}
# 	}

# 	target_de_jure_regions_above = yes

# 	valid_to_start = {
# 	}

# 	on_declaration = {
# 	}

# 	on_victory_desc = {
# 		first_valid = {
# 			triggered_desc = {
# 				trigger = { scope:defender = { is_local_player = yes } }
# 				desc = liberty_war_victory_defender_desc
# 			}
# 			desc = liberty_war_victory_desc
# 		}
# 		desc = liberty_war_victory_end_desc

# 	}

# 	on_victory = {
# 		scope:attacker = { show_pow_release_message_effect = yes }

# 		#EP2 Accolade glory gain from winning against higher ranked enemy
# 		scope:attacker = { accolade_attacker_war_end_glory_gain_med_effect = yes }

# 		scope:defender = {
# 			if = {
# 				limit = { has_realm_law = crown_authority_1 }
# 				add_realm_law = crown_authority_0
# 			}
# 			if = {
# 				limit = { has_realm_law = crown_authority_2 }
# 				add_realm_law = crown_authority_1
# 			}
# 			if = {
# 				limit = { has_realm_law = crown_authority_3 }
# 				add_realm_law = crown_authority_2
# 			}
# 			if = {
# 				limit = { has_realm_law = tribal_authority_1 }
# 				add_realm_law = tribal_authority_0
# 			}
# 			if = {
# 				limit = { has_realm_law = tribal_authority_2 }
# 				add_realm_law = tribal_authority_1
# 			}
# 			if = {
# 				limit = { has_realm_law = tribal_authority_3 }
# 				add_realm_law = tribal_authority_2
# 			}
			
# 			add_prestige = -500

# 			every_character_war = {
# 				limit = {
# 					is_attacker = scope:attacker
# 					is_defender = scope:defender
# 				}
# 				every_war_attacker = {
# 					if = {
# 						limit = {
# 							can_add_hook = {
# 								type = favor_hook
# 								target = scope:defender
# 							}
# 						}
# 						add_hook = {
# 							type = favor_hook
# 							target = scope:defender
# 						}
# 					}
# 				}
# 			}

# 			add_character_flag = {
# 				flag = recent_liberty_faction_war
# 				years = liberty_war_victory_cooldown
# 			}
# 		}

# 		hidden_effect = {
# 			scope:attacker = {
# 				add_truce_both_ways = {
# 					character = scope:defender
# 					days = 1825
# 					war = root.war
# 					result = victory
# 				}
# 				joined_faction = {
# 					save_scope_as = saved_faction
# 					add_faction_discontent = -200
# 					every_faction_member = {
# 						if = {
# 							limit = {
# 								exists = scope:attacker.joined_faction # Can get destroyed as we loop through
# 							}
# 							leave_faction_with_cooldown_effect = {
# 								FACTION = scope:attacker.joined_faction
# 								YEARS = liberty_war_victory_cooldown
# 							}
# 						}
# 						else = {
# 							add_faction_cooldown_effect = { YEARS = liberty_war_victory_cooldown }
# 						}
# 					}
# 				}
# 				# The faction should have already been destroyed due to all members leaving above, but in case it hasn't, destroy it now.
# 				if = {
# 					limit = { exists = scope:saved_faction }
# 					scope:saved_faction = {
# 						destroy_faction = yes
# 					}
# 				}
# 			}
# 		}
# 	}

# 	on_white_peace_desc = {
# 		first_valid = {
# 			triggered_desc = {
# 				trigger = { scope:defender = { is_local_player = yes } }
# 				desc = liberty_war_white_peace_defender_desc
# 			}
# 			triggered_desc = {
# 				trigger = {
# 					scope:attacker.joined_faction = {
# 						any_faction_member = { is_local_player = yes }
# 					}
# 				}
# 				desc = liberty_war_white_peace_attacker_desc
# 			}
# 			desc = liberty_war_white_peace_desc
# 		}
# 		desc = liberty_war_white_peace_end_desc

# 	}

# 	on_white_peace = {
# 		scope:attacker = {
# 			show_pow_release_message_effect = yes
# 			stress_impact = {
#  				ambitious = medium_stress_impact_gain
#  				arrogant = medium_stress_impact_gain
#  			}
# 		}
# 		hidden_effect = {
# 			scope:attacker = {
# 				add_truce_both_ways = {
# 					character = scope:defender
# 					days = 1825
# 					war = root.war
# 					result = white_peace
# 				}
# 			}
# 		}
# 		scope:defender = {
# 			stress_impact = {
#  				arrogant = medium_stress_impact_gain
#  			}
# 			add_character_flag = {
# 				flag = recent_liberty_faction_war
# 				years = faction_war_white_peace_cooldown
# 			}
# 		}
# 		on_white_peace_faction_revolt_war = yes
# 	}

# 	on_defeat_desc = {
# 		first_valid = {
# 			triggered_desc = {
# 				trigger = { scope:defender = { is_local_player = yes } }
# 				desc = liberty_war_defeat_defender_desc
# 			}
# 			triggered_desc = {
# 				trigger = {
# 					scope:attacker.joined_faction = {
# 						any_faction_member = { is_local_player = yes }
# 					}
# 				}
# 				desc = liberty_war_defeat_attacker_desc
# 			}
# 			desc = liberty_war_defeat_desc
# 		}
# 		desc = liberty_war_defeat_end_desc

# 	}

# 	on_defeat = {
# 		scope:attacker = { show_pow_release_message_effect = yes }
# 		scope:defender = {
# 			add_character_flag = {
# 				flag = recent_liberty_faction_war
# 				years = faction_war_defeat_cooldown
# 			}
# 			add_dread = medium_dread_gain
# 			add_achievement_flag_effect = { FLAG = achievement_know_your_place_flag }
# 		}
# 		on_lost_faction_revolt_war = yes
# 	}

# 	on_invalidated_desc = msg_invalidate_war_title

# 	check_attacker_inheritance_validity = no

# 	on_primary_attacker_death = inherit_faction
# 	on_primary_defender_death = inherit

# 	transfer_behavior = transfer

# 	attacker_allies_inherit = no
# 	defender_allies_inherit = yes

# 	war_name = "LIBERTY_WAR_NAME"

# 	interface_priority = 80

# 	use_de_jure_wargoal_only = yes

# 	attacker_wargoal_percentage = 0.8

# 	max_attacker_score_from_battles = 100
# 	max_defender_score_from_battles = 50
	
# 	max_defender_score_from_occupation = 150
# 	max_attacker_score_from_occupation = 150

# 	max_ai_diplo_distance_to_title = 500
# }

# # 退陣反乱
# depose_war = {
# 	icon = dissolution_war
# 	group = civil_war
# 	ai_only_against_liege = yes
# 	target_titles = none
# 	allow_hostages = no
# 	allowed_for_character = {
# 	}

# 	allowed_against_character = {
# 	}

# 	target_de_jure_regions_above = yes

# 	valid_to_start = {
# 	}

# 	on_declaration = {
# 		#on_declared_war = yes
# 		if = {
# 			limit = { NOT = { exists = scope:attacker.var:initial_target } }
# 			scope:attacker = {
# 				set_variable = {
# 					name = initial_target
# 					value = scope:defender
# 				}

# 				set_variable = {
# 					name = target_tier
# 					value = scope:defender.primary_title.tier
# 				}
# 			}
# 		}
# 	}

# 	on_victory_desc = {
# 		first_valid = {
# 			triggered_desc = {
# 				trigger = {
# 					scope:defender = { is_local_player = yes }
# 					OR = {
# 						NOT = { exists = scope:attacker.var:initial_target }
# 						scope:defender = scope:attacker.var:initial_target
# 						scope:defender.primary_title.tier <= scope:attacker.var:target_tier
# 					}
# 				}
# 				desc = depose_war_victory_desc_defender
# 			}
# 			triggered_desc = {
# 				trigger = {
# 					OR = {
# 						NOT = { exists = scope:attacker.var:initial_target }
# 						scope:defender = scope:attacker.var:initial_target
# 						scope:defender.primary_title.tier <= scope:attacker.var:target_tier
# 					}
# 				}
# 				desc = depose_war_victory_desc
# 			}
# 		}
# 	}

# 	on_victory = {
# 		scope:attacker = { show_pow_release_message_effect = yes }
# 		hidden_effect = {
# 			scope:attacker = {
# 				add_truce_both_ways = {
# 					character = scope:defender
# 					days = 1825
# 					war = root.war
# 					result = victory
# 				}
# 			}
# 		}

# 		#EP2 Accolade glory gain from winning against higher ranked enemy
# 		scope:attacker = { accolade_attacker_war_end_glory_gain_med_effect = yes }

# 		scope:defender = {
# 			# If we win the rebellion, our liege loses any legal right to imprison us/banish us/revoke our titles.
# 			consume_all_criminal_reasons_effect = {
# 				LIEGE = scope:defender
# 				CRIMINAL = scope:attacker
# 			}
# 			# Remove offending HumSac modifiers.
# 			hidden_effect = { fp1_remove_humsac_offended_counties_effect = yes }
# 			# Then our liege is deposed (but the imprisonment loss remains true for their heir).
# 			# Then our liege is deposed (but the imprisonment loss remains true for their heir).
# 			if = {
# 				limit = { NOT = { exists = scope:attacker.var:initial_target } }
# 				depose = yes
# 			}
# 			else = {
# 				if = {
# 					limit = { this = scope:attacker.var:initial_target }
# 					depose = yes
# 				}
# 				else_if = {
# 					limit = { primary_title.tier <= scope:attacker.var:target_tier}
# 					depose = yes
# 				}

# 				# remove variables
# 				scope:attacker = {
# 					remove_variable = initial_target
# 					remove_variable = target_tier
# 				}
# 			}
# 		}
# 	}

# 	on_white_peace_desc = {
# 		first_valid = {
# 			triggered_desc = {
# 				trigger = { scope:defender = { is_local_player = yes } }
# 				desc = depose_war_white_peace_desc_defender
# 			}
# 			desc = depose_war_white_peace_desc
# 		}

# 	}

# 	on_white_peace = {
# 		scope:attacker = {
# 			show_pow_release_message_effect = yes
# 			stress_impact = {
#  				ambitious = medium_stress_impact_gain
#  				arrogant = medium_stress_impact_gain
#  			}
# 		}
# 		scope:defender = {
# 			stress_impact = {
#  				arrogant = medium_stress_impact_gain
#  			}
# 		}
# 		on_white_peace_faction_revolt_war = yes
# 	}

# 	on_defeat_desc = {
# 		first_valid = {
# 			triggered_desc = {
# 				trigger = { scope:defender = { is_local_player = yes } }
# 				desc = depose_war_defeat_desc_defender
# 			}
# 			desc = depose_war_defeat_desc
# 		}

# 	}

# 	on_defeat = {
# 		scope:attacker = { show_pow_release_message_effect = yes }
# 		on_lost_faction_revolt_war = yes
# 		scope:defender = {
# 			add_dread = medium_dread_gain
# 		}
# 	}

# 	on_invalidated_desc = msg_invalidate_war_title

# 	check_attacker_inheritance_validity = no

# 	on_primary_attacker_death = inherit_faction
# 	on_primary_defender_death = inherit

# 	transfer_behavior = transfer

# 	attacker_allies_inherit = no
# 	defender_allies_inherit = yes

# 	war_name = "DEPOSE_WAR_NAME"

# 	interface_priority = 80

# 	use_de_jure_wargoal_only = yes

# 	attacker_wargoal_percentage = 0.8

# 	attacker_score_from_occupation_scale = 50
# 	defender_score_from_occupation_scale = 50
# 	max_attacker_score_from_battles = 100
# 	max_defender_score_from_battles = 100
	
# 	max_defender_score_from_occupation = 150
# 	max_attacker_score_from_occupation = 150

# 	max_ai_diplo_distance_to_title = 500
# }

